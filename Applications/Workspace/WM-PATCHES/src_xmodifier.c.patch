--- ./WindowMaker-0.95.7/src/xmodifier.c	2015-08-11 21:41:14.000000000 +0300
+++ ./WindowMaker/src/xmodifier.c	2016-11-24 23:25:04.542576736 +0200
@@ -129,48 +129,48 @@
 				KeyCode code;
 				KeySym sym;
 
-				inline void modwarn(const char *key_name, int old_mod, const char *other_key)
-				{
-					wwarning(_("key %s (0x%x) generates %s, which is generated by %s"),
-					         key_name, code, index_to_name(old_mod), other_key);
+#define modwarn(key_name, old_mod, other_key) \
+				{ \
+					wwarning(_("key %s (0x%x) generates %s, which is generated by %s"), \
+					         key_name, code, index_to_name(old_mod), other_key); \
 				}
 
-				inline void modbarf(const char *key_name, const char *other_mod)
-				{
-					wwarning(_("key %s (0x%x) generates %s, which is nonsensical"),
-					         key_name, code, other_mod);
+#define modbarf(key_name, other_mod) \
+				{ \
+					wwarning(_("key %s (0x%x) generates %s, which is nonsensical"), \
+					         key_name, code, other_mod); \
 				}
 
-				inline void check_modifier(const char *key_name, int mask)
-				{
-					if ((1 << modifier_index) != mask)
-						modbarf(key_name, index_to_name(modifier_index));
+#define check_modifier(key_name, mask) \
+				{ \
+					if ((1 << modifier_index) != mask) \
+						modbarf(key_name, index_to_name(modifier_index)); \
 				}
 
-				inline void store_modifier(const char *key_name, int *old_mod)
-				{
-					if (*old_mod && *old_mod != modifier_index)
-						wwarning(_("key %s (0x%x) generates both %s and %s, which is nonsensical"),
-						         key_name, code, index_to_name(*old_mod), index_to_name(modifier_index));
-					if (modifier_index == ShiftMapIndex) {
-						modbarf(key_name, "ModShift");
-					} else if (modifier_index == LockMapIndex) {
-						modbarf(key_name, "ModLock");
-					} else if (modifier_index == ControlMapIndex) {
-						modbarf(key_name, "ModControl");
-					} else if (sym == XK_Mode_switch) {
-						mode_bit = modifier_index; /* Mode_switch is special, see below... */
-					} else if (modifier_index == meta_bit && *old_mod != meta_bit) {
-						modwarn(key_name, meta_bit, "Meta");
-					} else if (modifier_index == super_bit && *old_mod != super_bit) {
-						modwarn(key_name, super_bit, "Super");
-					} else if (modifier_index == hyper_bit && *old_mod != hyper_bit) {
-						modwarn(key_name, hyper_bit, "Hyper");
-					} else if (modifier_index == alt_bit && *old_mod != alt_bit) {
-						modwarn(key_name, alt_bit, "Alt");
-					} else {
-						*(old_mod) = modifier_index;
-					}
+#define store_modifier(key_name, old_mod) \
+				{ \
+					if (*old_mod && *old_mod != modifier_index) \
+						wwarning(_("key %s (0x%x) generates both %s and %s, which is nonsensical"), \
+						         key_name, code, index_to_name(*old_mod), index_to_name(modifier_index)); \
+					if (modifier_index == ShiftMapIndex) { \
+						modbarf(key_name, "ModShift"); \
+					} else if (modifier_index == LockMapIndex) { \
+						modbarf(key_name, "ModLock"); \
+					} else if (modifier_index == ControlMapIndex) { \
+						modbarf(key_name, "ModControl"); \
+					} else if (sym == XK_Mode_switch) { \
+						mode_bit = modifier_index; /*  Mode_switch is special, see below... */ \
+					} else if (modifier_index == meta_bit && *old_mod != meta_bit) { \
+						modwarn(key_name, meta_bit, "Meta"); \
+					} else if (modifier_index == super_bit && *old_mod != super_bit) { \
+						modwarn(key_name, super_bit, "Super"); \
+					} else if (modifier_index == hyper_bit && *old_mod != hyper_bit) { \
+						modwarn(key_name, hyper_bit, "Hyper"); \
+					} else if (modifier_index == alt_bit && *old_mod != alt_bit) { \
+						modwarn(key_name, alt_bit, "Alt"); \
+					} else { \
+						*(old_mod) = modifier_index; \
+					} \
 				}
 
 				code = x_modifier_keymap->modifiermap[modifier_index * mkpm + modifier_key];
@@ -272,6 +272,10 @@
 	ModeMask = (mode_bit ? (1 << mode_bit) : 0);	/* unused */
 
 	XFreeModifiermap(x_modifier_keymap);
+#undef store_modifier
+#undef modwarn
+#undef check_modifier
+#undef modbarf
 }
 
 const char *wXModifierToShortcutLabel(int mask)
