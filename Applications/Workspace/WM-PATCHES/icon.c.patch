--- ./wmaker-crm_next/src/icon.c	2016-10-23 02:37:18.518271255 +0300
+++ ./WM/src/icon.c	2016-11-18 22:37:35.056197599 +0200
@@ -51,7 +51,11 @@
 /**** Global varianebles ****/
 
 #define MOD_MASK wPreferences.modifier_mask
+#ifdef NEXTSPACE
+#define CACHE_ICON_PATH "/WindowMaker/CachedPixmaps"
+#else
 #define CACHE_ICON_PATH "/Library/WindowMaker/CachedPixmaps"
+#endif
 #define ICON_BORDER 3
 
 static void miniwindowExpose(WObjDescriptor *desc, XEvent *event);
@@ -234,6 +238,7 @@
 	wfree(icon);
 }
 
+#ifndef NEXTSPACE
 static void drawIconTitleBackground(WScreen *scr, Pixmap pixmap, int height)
 {
 	XFillRectangle(dpy, pixmap, scr->icon_title_texture->normal_gc, 0, 0, wPreferences.icon_size, height + 1);
@@ -242,6 +247,7 @@
 	XDrawLine(dpy, pixmap, scr->icon_title_texture->dim_gc,
 		  wPreferences.icon_size - 1, 0, wPreferences.icon_size - 1, height + 1);
 }
+#endif /* NEXTSPACE */
 
 static void icon_update_pixmap(WIcon *icon, RImage *image)
 {
@@ -254,7 +260,12 @@
 
 	switch (icon->tile_type) {
 	case TILE_NORMAL:
-		tile = RCloneImage(scr->icon_tile);
+#ifdef NEXTSPACE
+ 		if (icon->show_title)
+		  tile = RCloneImage(scr->miniwindow_tile);
+		else
+#endif
+		  tile = RCloneImage(scr->icon_tile);
 		break;
 	case TILE_CLIP:
 		tile = RCloneImage(scr->clip_tile);
@@ -313,8 +324,10 @@
 	RReleaseImage(tile);
 
 	/* Draw the icon's title background (without text) */
+#ifndef NEXTSPACE
 	if (icon->show_title)
 		drawIconTitleBackground(scr, pixmap, theight);
+#endif /* NEXTSPACE */
 
 	icon->pixmap = pixmap;
 }
@@ -470,7 +483,7 @@
  */
 char *wIconStore(WIcon *icon)
 {
-	char *path, *dir_path, *file, *filename;
+	char *path, *dir_path, *file;
 	int len = 0;
 	RImage *image = NULL;
 	WWindow *wwin = icon->owner;
@@ -488,23 +501,15 @@
 		return NULL;
 	}
 
-	/* Create the file name */
-	len = strlen(file) + 5;
-	filename = wmalloc(len);
-	snprintf(filename, len, "%s.xpm", file);
-	wfree(file);
-
-	/* Create the full path, including the filename */
-	len = strlen(dir_path) + strlen(filename) + 1;
+	len = strlen(dir_path) + strlen(file) + 5;
 	path = wmalloc(len);
-	snprintf(path, len, "%s%s", dir_path, filename);
+	snprintf(path, len, "%s%s.xpm", dir_path, file);
 	wfree(dir_path);
+	wfree(file);
 
 	/* If icon exists, exit */
-	if (access(path, F_OK) == 0) {
-		wfree(path);
-		return filename;
-	}
+	if (access(path, F_OK) == 0)
+		return path;
 
 	if (wwin->net_icon_image)
 		image = RRetainImage(wwin->net_icon_image);
@@ -513,38 +518,17 @@
 
 	if (!image) {
 		wfree(path);
-		wfree(filename);
 		return NULL;
 	}
 
 	if (!RSaveImage(image, path, "XPM")) {
 		wfree(path);
-		wfree(filename);
 		path = NULL;
 	}
 
-	wfree(path);
 	RReleaseImage(image);
 
-	return filename;
-}
-
-void remove_cache_icon(char *filename)
-{
-	char *cachepath;
-
-	if (!filename)
-		return;
-
-	cachepath = get_icon_cache_path();
-	if (!cachepath)
-		return;
-
-	/* Filename check/parse could be here */
-	if (!strncmp(filename, cachepath, strlen(cachepath)))
-		unlink(filename);
-
-	wfree(cachepath);
+	return path;
 }
 
 static void cycleColor(void *data)
@@ -777,12 +761,7 @@
 {
 	RImage *image = NULL;
 	unsigned int w, h, d;
-	WWindow *wwin;
-
-	if ((!icon) || (!icon->owner))
-		return NULL;
-
-	wwin = icon->owner;
+	WWindow *wwin = icon->owner;
 
 	if (!getSize(wwin->wm_hints->icon_pixmap, &w, &h, &d)) {
 		icon->owner->wm_hints->flags &= ~IconPixmapHint;
@@ -815,7 +794,9 @@
 			x = (icon->core->width - 4) - w;
 		else
 			x = (icon->core->width - w) / 2;
-
+#ifdef NEXTSPACE
+                if (x < 2) x = 2;
+#endif
 		WMDrawString(scr->wmscreen, icon->core->window, scr->icon_title_color,
 			     scr->icon_title_font, x, 1, tmp, l);
 		wfree(tmp);
