--- ./WindowMaker-0.95.7/src/event.c	2015-08-11 21:41:14.000000000 +0300
+++ ./WindowMaker/src/event.c	2018-06-26 00:09:18.177558997 +0300
@@ -80,6 +80,9 @@
 #include "switchmenu.h"
 #include "wsmap.h"
 
+#ifdef NEXTSPACE
+#include <Workspace+WindowMaker.h>
+#endif
 
 #define MOD_MASK wPreferences.modifier_mask
 
@@ -90,6 +93,10 @@
 static void handleMapNotify(XEvent *event);
 static void handleUnmapNotify(XEvent *event);
 static void handleButtonPress(XEvent *event);
+#ifdef NEXTSPACE
+static void handleButtonRelease(XEvent * event);
+static void handleKeyRelease(XEvent * event);
+#endif
 static void handleExpose(XEvent *event);
 static void handleDestroyNotify(XEvent *event);
 static void handleConfigureRequest(XEvent *event);
@@ -209,6 +216,11 @@
 		handleKeyPress(event);
 		break;
 
+#ifdef NEXTSPACE
+	case KeyRelease:
+		handleKeyRelease(event);
+		break;
+#endif
 	case MotionNotify:
 		handleMotionNotify(event);
 		break;
@@ -237,6 +249,11 @@
 		handleExpose(event);
 		break;
 
+#ifdef NEXTSPACE
+	case ButtonRelease:
+		handleButtonRelease(event);
+          break;
+#endif
 	case PropertyNotify:
 		handlePropertyNotify(event);
 		break;
@@ -580,9 +597,15 @@
 		 * XRRUpdateConfiguration when screen configuration change notify
 		 * events are generated */
 		XRRUpdateConfiguration(event);
+#ifdef NEXTSPACE                
+		for (int i = 0; i < w_global.screen_count; i++) {
+			XWUpdateScreenInfo(wScreenWithNumber(i));
+		}
+#else
 		WCHANGE_STATE(WSTATE_RESTARTING);
 		Shutdown(WSRestartPreparationMode);
 		Restart(NULL,True);
+#endif
 	}
 #endif
 }
@@ -670,6 +693,9 @@
 
 	wwin = wWindowFor(window);
 	if (wwin) {
+#ifdef NEXTSPACE
+		dispatch_sync(workspace_q, ^{ XWApplicationDidCloseWindow(wwin); });
+#endif
 		wUnmanageWindow(wwin, False, True);
 	}
 
@@ -803,17 +829,40 @@
 
 	scr = wScreenForRootWindow(event->xbutton.root);
 
+#ifdef NEXTSPACE
+  // reset current focused window button beacuse ButtonPress may change focus
+	scr->flags.modifier_pressed = 0;
+	wWindowUpdateButtonImages(scr->focused_window);
+#endif
+
 #ifdef BALLOON_TEXT
 	wBalloonHide(scr);
 #endif
 
 	if (!wPreferences.disable_root_mouse && event->xbutton.window == scr->root_win) {
 		if (event->xbutton.button == Button1 && wPreferences.mouse_button1 != WA_NONE) {
+#ifdef NEXTSPACE
+			if (scr->focused_window && !strcmp(scr->focused_window->wm_class, "GNUstep")) {
+				XSendEvent(dpy, scr->focused_window->client_win, True, ButtonPressMask, event);
+			}
+			else
+#endif
 			executeButtonAction(scr, event, wPreferences.mouse_button1);
 		} else if (event->xbutton.button == Button2 && wPreferences.mouse_button2 != WA_NONE) {
 			executeButtonAction(scr, event, wPreferences.mouse_button2);
 		} else if (event->xbutton.button == Button3 && wPreferences.mouse_button3 != WA_NONE) {
+#ifdef NEXTSPACE
+			if (scr->focused_window) {
+				if (!strcmp(scr->focused_window->wm_class, "GNUstep")) {
+					XSendEvent(dpy, scr->focused_window->client_win, False, ButtonPressMask, event);
+				}
+			}
+			else {
+				XSendEvent(dpy, scr->dock->icon_array[0]->icon->icon_win, False, ButtonPressMask, event);
+			}
+#else
 			executeButtonAction(scr, event, wPreferences.mouse_button3);
+#endif
 		} else if (event->xbutton.button == Button8 && wPreferences.mouse_button8 != WA_NONE) {
 			executeButtonAction(scr, event, wPreferences.mouse_button8);
 		}else if (event->xbutton.button == Button9 && wPreferences.mouse_button9 != WA_NONE) {
@@ -873,6 +922,19 @@
 	}
 }
 
+#ifdef NEXTSPACE
+static void handleButtonRelease(XEvent * event)
+{
+	WScreen *scr = wScreenForRootWindow(event->xbutton.root);
+
+	if (!wPreferences.disable_root_mouse && event->xbutton.window == scr->root_win) {
+		if (!strcmp(scr->focused_window->wm_class, "GNUstep")) {
+			XSendEvent(dpy, scr->focused_window->client_win, True, ButtonReleaseMask, event);
+		}
+	}
+}
+#endif
+
 static void handleMapNotify(XEvent * event)
 {
 	WWindow *wwin;
@@ -1385,10 +1447,27 @@
 #ifdef KEEP_XKB_LOCK_STATUS
 	XkbStateRec staterec;
 #endif				/*KEEP_XKB_LOCK_STATUS */
-
 	/* ignore CapsLock */
 	modifiers = event->xkey.state & w_global.shortcut.modifiers_mask;
 
+#ifdef NEXTSPACE
+  /* fprintf(stderr, "[WindowMaker] handleKeyPress: %i state: %i mask: %i modifiers: %i\n", */
+  /*         event->xkey.keycode, event->xkey.state, MOD_MASK, modifiers); */
+  /* fprintf(stderr, "[WindowMaker] handleKeyPress: XK_Super_L == %i XSuper_R == %i\n", */
+  /*         XKeysymToKeycode(dpy, XK_Super_L), XKeysymToKeycode(dpy, XK_Super_R)); */
+	if (((event->xkey.keycode == XKeysymToKeycode(dpy, XK_Super_L)) ||
+       (event->xkey.keycode == XKeysymToKeycode(dpy, XK_Super_R))) &&
+			modifiers == 0) {
+		scr->flags.modifier_pressed = 1;
+		wWindowUpdateButtonImages(wwin);
+		return;
+	}
+	else {
+		scr->flags.modifier_pressed = 0;
+		wWindowUpdateButtonImages(wwin);
+	}
+#endif
+
 	for (i = 0; i < WKBD_LAST; i++) {
 		if (wKeyBindings[i].keycode == 0)
 			continue;
@@ -1866,7 +1945,21 @@
 #endif	/* KEEP_XKB_LOCK_STATUS */
 	}
 }
-
+#ifdef NEXTSPACE
+static void handleKeyRelease(XEvent * event)
+{
+	WScreen *scr = wScreenForRootWindow(event->xkey.root);
+	WWindow *wwin = scr->focused_window;
+  
+  /* fprintf(stderr, "[WindowMaker] handleKeyRelease: %i state: %i mask: %i\n", */
+  /*         event->xkey.keycode, event->xkey.state, MOD_MASK); */
+	if ( (event->xkey.keycode == XKeysymToKeycode(dpy, XK_Super_L)) ||
+       (event->xkey.keycode == XKeysymToKeycode(dpy, XK_Super_R)) ) {
+    scr->flags.modifier_pressed = 0;
+    wWindowUpdateButtonImages(wwin);
+  }
+}
+#endif
 static void handleMotionNotify(XEvent * event)
 {
 	WScreen *scr = wScreenForRootWindow(event->xmotion.root);
