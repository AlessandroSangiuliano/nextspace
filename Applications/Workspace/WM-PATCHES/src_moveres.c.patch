--- ./WindowMaker-0.95.7/src/moveres.c	2015-08-11 21:41:14.000000000 +0300
+++ ./WindowMaker/src/moveres.c	2018-02-16 01:54:22.369475753 +0200
@@ -1996,8 +1996,8 @@
 		int ydir = (abs(y) < (wwin->client.height / 2)) ? UP : DOWN;
 
 		/* How much resize space is allowed */
-		int spacew = abs(wwin->client.width / 3);
-		int spaceh = abs(wwin->client.height / 3);
+		int spacew = wwin->client.width / 3;
+		int spaceh = wwin->client.height / 3;
 
 		/* Determine where x fits */
 		if ((abs(x) > wwin->client.width/2 - spacew/2) &&
@@ -2040,6 +2040,186 @@
 	return dir;
 }
 
+#ifdef NEXTSPACE
+#include <X11/extensions/Xfixes.h>
+typedef struct {
+	PointerBarrier h_min;
+	PointerBarrier h_max;
+	PointerBarrier v_min;
+	PointerBarrier v_max;
+	PointerBarrier wl_min;
+	PointerBarrier wr_min;
+	PointerBarrier wl_max;
+	PointerBarrier wr_max;
+} MouseBarriers;
+
+Cursor wMouseResizeCursor(WWindow *wwin, int res, int fw, int fh)
+{
+	Cursor new_cursor = wPreferences.cursor[WCUR_ARROW];
+	
+	if ((res == (LEFT | DOWN)) || (res == (LEFT | UP)))
+		{
+			if (fh >= wwin->normal_hints->max_height && fw >= wwin->normal_hints->max_width)
+				new_cursor = wPreferences.cursor[WCUR_TOPRIGHTRESIZE];
+			else
+				new_cursor = wPreferences.cursor[WCUR_BOTTOMLEFTRESIZE];
+		}
+	else if ((res == (RIGHT | DOWN)) || (res == (RIGHT | UP)))
+		{
+			if (fh >= wwin->normal_hints->max_height && fw >= wwin->normal_hints->max_width)
+				new_cursor = wPreferences.cursor[WCUR_TOPLEFTRESIZE];
+			else
+				new_cursor = wPreferences.cursor[WCUR_BOTTOMRIGHTRESIZE];
+		}
+	else if (res == LEFT || res == RIGHT)
+		{
+			if (fw >= wwin->normal_hints->max_width)
+				new_cursor = wPreferences.cursor[(res == LEFT) ? WCUR_RIGHTRESIZE: WCUR_LEFTRESIZE];
+			else if (fw <= wwin->normal_hints->min_width)
+				new_cursor = wPreferences.cursor[(res == LEFT) ? WCUR_LEFTRESIZE: WCUR_RIGHTRESIZE];
+			else
+				new_cursor = wPreferences.cursor[WCUR_HORIZONRESIZE];
+		}
+	else if (res == UP || res == DOWN)
+		{
+			if (fh >= wwin->normal_hints->max_height)
+				new_cursor = wPreferences.cursor[WCUR_UPRESIZE];
+			else if (fh <= wwin->normal_hints->min_height)
+				new_cursor = wPreferences.cursor[WCUR_DOWNRESIZE];
+			else
+				new_cursor = wPreferences.cursor[WCUR_VERTICALRESIZE];
+		}
+
+	return new_cursor;
+}
+
+void wMouseDestroyResizeBarriers(MouseBarriers barriers)
+{
+	if (barriers.h_min > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.h_min);
+	if (barriers.h_max > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.h_max);
+	if (barriers.wl_min > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.wl_min);
+	if (barriers.wr_min > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.wr_min);
+	if (barriers.wl_max > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.wl_max);
+	if (barriers.wr_max > 0)
+		XFixesDestroyPointerBarrier(dpy, barriers.wr_max);
+}
+
+MouseBarriers wMouseSetResizeBarriers(WWindow *wwin, int x_root, int y_root, int res)
+{
+  WScreen *scr = wwin->screen_ptr;
+  Window root = scr->root_win;
+  int v_border = wwin->frame->top_width + wwin->frame->bottom_width;
+  int h_border = 2;
+  int v_offset, h_offset;
+  int y, x;
+  MouseBarriers barriers = {0, 0, 0, 0, 0, 0};
+
+  v_offset = wwin->frame_y + wwin->client.height + v_border - y_root;
+
+  // Minimum Height
+  if (res == LEFT || res == RIGHT)
+    {
+      barriers.h_min = XFixesCreatePointerBarrier (dpy, root,
+						   0, y_root,
+						   scr->scr_width, y_root,
+						   BarrierPositiveY, 0, NULL);
+    }
+  else if (wwin->normal_hints->min_height > 0)
+    {
+      y = (wwin->frame_y + wwin->normal_hints->min_height + v_border) - v_offset;
+      barriers.h_min = XFixesCreatePointerBarrier (dpy, root,
+						   0, y,
+						   scr->scr_width, y,
+						   BarrierPositiveY, 0, NULL);
+    }
+  // Maximum Height
+  if (res == LEFT || res == RIGHT)
+    {
+      barriers.h_max = XFixesCreatePointerBarrier (dpy, root,
+						   0, y_root+1,
+						   scr->scr_width, y_root+1,
+						   BarrierNegativeY, 0, NULL);
+    }
+  else if (wwin->normal_hints->max_height < scr->scr_height)
+    {
+      y = (wwin->frame_y + wwin->normal_hints->max_height + v_border + 1) - v_offset;
+      barriers.h_max = XFixesCreatePointerBarrier (dpy, root,
+						   0, y,
+						   scr->scr_width, y,
+						   BarrierNegativeY, 0, NULL);
+    }
+  // Minimum Width
+  if (wwin->normal_hints->min_width > 0)
+    {
+      if ((res == LEFT) || (res == (LEFT | DOWN)) || (res == (LEFT | UP)))
+	{// Left
+	  h_offset = x_root - wwin->frame_x;
+	  x = (wwin->frame_x + (wwin->client.width - wwin->normal_hints->min_width) + h_border) + h_offset;
+	  barriers.wl_min = XFixesCreatePointerBarrier (dpy, root,
+							x, 0,
+							x, scr->scr_height,
+							BarrierNegativeX, 0, NULL);
+	}
+      else if ((res == RIGHT) || (res == (RIGHT | DOWN)) || (res == (RIGHT | UP)))
+	{// Right
+	  h_offset = wwin->frame_x + wwin->client.width + h_border - x_root;
+	  x = (wwin->frame_x + wwin->normal_hints->min_width + h_border) - h_offset;
+	  barriers.wr_min = XFixesCreatePointerBarrier (dpy, root,
+							x, 0,
+							x, scr->scr_height,
+							BarrierPositiveX, 0, NULL);
+	}
+      else
+	{
+	  barriers.wl_min = XFixesCreatePointerBarrier (dpy, root,
+							x_root, 0,
+							x_root, scr->scr_height,
+							BarrierPositiveX, 0, NULL);
+	}
+    }
+  // Maximum Width
+  if (wwin->normal_hints->max_width < scr->scr_width)
+    {
+      int gap = wwin->normal_hints->max_width - wwin->client.width;
+      if ((res == LEFT) || (res == (LEFT | DOWN)) || (res == (LEFT | UP)))
+	{// Left
+	  h_offset = x_root - wwin->frame_x;
+	  x = (wwin->frame_x - h_border - gap) + h_offset;
+	  barriers.wl_max = XFixesCreatePointerBarrier (dpy, root,
+							x, 0,
+							x, scr->scr_height,
+							BarrierPositiveX, 0, NULL);
+	}
+      else if ((res == RIGHT) || (res == (RIGHT | DOWN)) || (res == (RIGHT | UP)))
+	{// Right
+	  h_offset = wwin->frame_x + wwin->client.width + h_border - x_root;
+	  x = (wwin->frame_x + wwin->client.width + gap + h_border + 1) - h_offset;
+	  barriers.wr_max = XFixesCreatePointerBarrier (dpy, root,
+							x, 0,
+							x, scr->scr_height,
+							BarrierNegativeX, 0, NULL);
+	}
+      else
+	{
+	  barriers.wl_max = XFixesCreatePointerBarrier (dpy, root,
+							x_root+1, 0,
+							x_root+1, scr->scr_height,
+							BarrierNegativeX, 0, NULL);
+	}
+    }
+
+  // Put pointer inside barriers
+  XWarpPointer(dpy, None, root, 0, 0, 0, 0, x_root, y_root);
+	
+  return barriers;
+}
+#endif // NEXTSPACE
+
 void wMouseResizeWindow(WWindow * wwin, XEvent * ev)
 {
 	XEvent event;
@@ -2068,6 +2248,11 @@
 		    ? wGetHeadForWindow(wwin)
 		    : scr->xine_info.primary_head);
 	int opaqueResize = wPreferences.opaque_resize;
+  Cursor cursor;
+#ifdef NEXTSPACE
+  MouseBarriers barriers;
+  Cursor new_cursor;
+#endif // NEXTSPACE
 
 	if (!IS_RESIZABLE(wwin))
 		return;
@@ -2137,6 +2322,15 @@
 				fw = rw;
 				fh = rh - vert_border;
 				wWindowConstrainSize(wwin, (unsigned int *)&fw, (unsigned int *)&fh);
+#ifdef NEXTSPACE
+				new_cursor = wMouseResizeCursor(wwin, res, fw, fh);
+				if (cursor != new_cursor)
+					{
+						cursor = new_cursor;
+						XChangeActivePointerGrab(dpy, ButtonMotionMask | ButtonReleaseMask | ButtonPressMask,
+																		 cursor, CurrentTime);
+					}
+#endif // NEXTSPACE
 				fh += vert_border;
 				if (res & LEFT)
 					fx = rx2 - fw + 1;
@@ -2167,34 +2361,29 @@
 
 				res = getResizeDirection(wwin, tx, ty, orig_y - event.xmotion.y_root, flags);
 
-				if (res == (UP | LEFT))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_TOPLEFTRESIZE], CurrentTime);
-				else if (res == (UP | RIGHT))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_TOPRIGHTRESIZE], CurrentTime);
-				else if (res == (DOWN | LEFT))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_BOTTOMLEFTRESIZE], CurrentTime);
-				else if (res == (DOWN | RIGHT))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_BOTTOMRIGHTRESIZE], CurrentTime);
-				else if (res == DOWN || res == UP)
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_VERTICALRESIZE], CurrentTime);
-				else if (res & (DOWN | UP))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_VERTICALRESIZE], CurrentTime);
-				else if (res & (LEFT | RIGHT))
-					XChangeActivePointerGrab(dpy, ButtonMotionMask
-								 | ButtonReleaseMask | ButtonPressMask,
-								 wPreferences.cursor[WCUR_HORIZONRESIZE], CurrentTime);
+#ifdef NEXTSPACE
+				barriers = wMouseSetResizeBarriers(wwin, orig_x, orig_y, res);
+				cursor = wMouseResizeCursor(wwin, res, fw, fh);
+#else
+				cursor = wPreferences.cursor[WCUR_ARROW];
+	
+				if (resize_direction == (UP | LEFT))
+					cursor = wPreferences.cursor[WCUR_TOPLEFTRESIZE];
+				else if (resize_direction == (UP | RIGHT))
+					cursor = wPreferences.cursor[WCUR_TOPRIGHTRESIZE];
+				else if (resize_direction == (DOWN | LEFT))
+					cursor = wPreferences.cursor[WCUR_BOTTOMLEFTRESIZE];
+				else if (resize_direction == (DOWN | RIGHT))
+					cursor = wPreferences.cursor[WCUR_BOTTOMRIGHTRESIZE];
+				else if (resize_direction == DOWN || resize_direction == UP)
+					cursor = wPreferences.cursor[WCUR_VERTICALRESIZE];
+				else if (resize_direction & (DOWN | UP))
+					cursor = wPreferences.cursor[WCUR_VERTICALRESIZE];
+				else if (resize_direction & (LEFT | RIGHT))
+					cursor = wPreferences.cursor[WCUR_HORIZONRESIZE];
+#endif // NEXTSPACE
+				XChangeActivePointerGrab(dpy, ButtonMotionMask | ButtonReleaseMask | ButtonPressMask,
+																 cursor, CurrentTime);
 
 				XGrabKeyboard(dpy, root, False, GrabModeAsync, GrabModeAsync, CurrentTime);
 
@@ -2211,6 +2400,10 @@
 				started = 1;
 			}
 			if (started) {
+				/* Don't draw frame if window proposed geometry stopped changing */
+				if (orig_fw == fw && orig_fh == fh)
+					break;
+        
 				if (!opaqueResize)
 					drawTransparentFrame(wwin, orig_fx, orig_fy, orig_fw, orig_fh);
 
@@ -2246,6 +2439,8 @@
 		case ButtonRelease:
 			if (event.xbutton.button != ev->xbutton.button)
 				break;
+      
+			wMouseDestroyResizeBarriers(barriers);
 
 			if (started) {
 				showGeometry(wwin, fx, fy, fx + fw, fy + fh, res);
