Общие мысли

Во времена NEXTSTEP было множество клавиатур и принципов работы с приложениями. Насколько я знаю, первыми кто озаботился какими-либо правилами взаимодействия человека с программами была компания IBM. Они создали книжку, по которой всем разработчикам рекомендовалось проектировать свои программы — Common User Access (CUA). После IBM стало хорошим тоном создавать свои Design Guidelines — Apple, Microsoft, GNOME, KDE и т.д.

Насколько мне известно сейчас существуют несколько школ использования модификаторов:
• Control — Windows, GNOME, KDE. Shift и Alt — дополняющие (например, Ctrl+Shift+F в Visio).  Super используется для системных нужд (управление окнами, вызов всяких системных полезных штучек).
• Command — NeXT, Apple — расположен физически на клавиатуре там же, где у PC расположен Alt.
• Alt — Maya, WindowMaker, Emacs — не то, чтобы основной модификатор, но встречаются для выполнения важных действий.
• Super — она же Win — используется для управления окнами и всякими Windows-специфичными вещами (управление окнами, вызов всяких системных полезных штучек).

Кнопка Command(Alt) всегда используется для привычных действий в других приложениях (Cmd-C - Copy, Cmd-V - Paste и т.д.). Alternate используется в:
      • Terminal: например для Emacs
      • Управлении окнами (Alternate-Up/Down/Left/Right)
      • Управлении сессией - Alternate-Scroll Lock - Lock Screen
Другие приложения X Window обычно используют Control (IBM CUA).

_Terminology_

Alt - label on PC keyboard. Xorg keysyms: Alt_L, Alt_R
Ctrl - label on PC keyboard. Xorg keysyms: Ctrl_L, Ctrl_R 
Super - on most PC keyboards labeled with Windows logo. Keysyms: Super_L, Super_R
Meta - this not a specific key and has special meaning for some applications. For example in Emacs in Terminal it is a Super or Esc.
Command - default modifier in AppKit. Mapped to the Alt_L and Alt_R. Menu item shortcuts has no special symbol or image. All menu shortcuts (Copy c) mean usage of Command+letter.
Alternate - Mapped to the Super. Menu item shortcuts shown with italics. Application specific shortcuts (not recommended).
Control - name for NEXTSPACE (was used in NeXTSTEP). Mapped to the Ctrl_L and Ctrl_R.

_Design Rules_

Command   == Alt   == Alt_L and Alt_R      == Mod1
Alternate == Super == Super_L and Super_R  == Mod4
Control   == Ctrl  == Ctrl_L and Ctrl_R    == Ctrl
Shift     == Shift == Shift_L and Shift_R  == Shift

*Command*

    WindowMaker = Mod1		Mod1+m, Mod1+w, Mod1+h
    Xorg        = Alt_L, Alr_R
    Emacs GUI   = Meta
    Terminal    = Command
    AppKit      = Command

• AppKit — Command (вызов пунктов меню, перемещение по тексту и т.д.);
• Workspace/WindowMaker — should not be used exept the following:
	Command+m (Mod1+m) - Miniaturize window. If AppKit (GNUstep) window
	focused: do not miniaturize and send keypress to application.
	Command+w (Mod1+m) - Close window. If AppKit (GNUstep) window
	focused: do not close window and send keypress to application.
	Command+h (Mod1+h) - Hide application windows. If AppKit (GNUstep)
	application active: do not hide windows and send keypress to
	application.
• X Window applications (Qt, GTK+) пользуются на свое усмотрение за исключением
сочетаний, которые интерпретируются Workspace/WindowMaker (описано в
предыдущем пункте).

*Alternate* (Super, Win)

    WindowMaker = Mode4
    Xorg        = Super_L, Super_R
    Terminal    = Meta (sends Escape sequence)
	• AppKit - Alternate (например при перетаскивании мышкой файлов и нажатом Super меняется тип опреации с Move на Copy).
	• Workspace - Super (Mod4), используется для управления окнами и workspaces: перемещение, изменение размеров, тайлинг, переключение между workspaces, переключение между окнами одного приложения (Super-Tab), перетаскивание и изменение размеров окон (Super-RMB Click, Super-LMB Click).
	• Приложения X Window - сейчас не могу припомнить приложения, которые используют Super как модификатор в приложении. Наоборот - да: в инструкции по установке Maya на Linux есть указание переназначить модификатор в GNOME с Alt на Super.
	• Terminal + Emacs - Terminal использует Super как замену Alt в Emacs (генерирует Escape-последовательность, которая воспринимается Emacs как нажатие Alt+ в консоли Linux).

*Control & Shift*

Тут никаких проблем - Control и Shift являются сами собой и различными приложениями интерпретируются как есть.
Приложения X Window (GNOME, KDE, Qt, GTK+) используют Control как основной модификатор приложений (вызов меню, перемещение по тексту и т.д.).
В приложениях GNUstep Control, как правило, не используется. За исключением: в
WindowMaker - переключение между workspaces (нужно что-то с этим делать), а в
приложениях X Window это сочетание клавиш используется для перемещения по
тексту. В MacOS такой проблемы нет, поскольку приложения используют для
перемещения по тексту сочетание клавиш Command+стрелки. Но, в принципе, эту
привычку можно поменять на Super+стрелки в Workspace/WindowMaker.

There are some usefull/comfort shortcuts users may tend do see:
	Ctrl-Insert, Shift-Delete, Shift-Insert — Copy/Cut/Paste
	Ctrl-Home, Ctrl-End — Beginning/End of the document
	Ctrl-Left, Ctrl-Right — Go one word left/right.

Caveats: Control-Home, Control-End не работает в Emacs. Похоже это такая же
ситуация как и с Shift.

*Compose Key*
Это специальная кнопка, с которой еще предстоит разобраться.

Alternate и Command

Note: if you want to use some shortcuts in your application that overlapped with shortcuts bound to menu items — your shortcuts will ignored and actions connected to menu items will be called. Application level (AppKit, menu items, popup buttons etc.) shortcuts have higher priority.

1. Command always used for AppKit applications (GNUstep, NextSpace).
Text elements (NSTextView, NSTextField):
	Left/Right	Word Left/Right
	Home/End	Begin/End of document
	PgUp/PgDown	Page Up/Down with selected line at center
2. Alternate used for:
	Window management: 	Up, Down, Left, Right
	Keyboard layouts switching: 	Space
	Screen Lock:	ScrLck
	Terminal.app (Treat as Meta):	Generates "\e"

So actions in application context called by using shortcuts with Command modifier.
Actions that involve desktop manipulation called with Alternate+ shortcuts.
X Window applications usually uses CUA standard.
      
Terminal: Shift и другие сочетания модификаторов (Shift-Alt, Ctrl-Alt, Ctrl-Alt-Shift)

Терминальные программы пользуются ncurses, которая в свою очередь пользуется terminfo. Terminal изначально был реализован с использованием парсера Linux Console. Соответственно при запуске приложений переменная TERM выставляется в значение 'linux'. Файл terminfo 'linux' описывает возможности консоли Linux. Консоль Linux не поддерживает модификатор Shift.

В xterm эта проблема решена следующим образом в файл terminfo внесены расширения, которые описывают char sequences для (например, для Shift-Up это '\e1;2A'. Соответственно, приложение терминала может транслировать нажатие сочетания клавиш в соответствующий char sequence.

По-идее всю недостающую функциональность нужно добавить в terminfo-файл linux, назвать его linuxterm, положить его в ~/.terminfo и выставлять переменную TERM=linuxterm при создании окна терминала. Но видимо не все так просто. Просто перекомпилированный файл xterm работает не так (например, Shift-Right/Left работает, а Shift-Up/Down - нет).
