--- gnustep-base-1.24.8/Headers/GNUstepBase/GSConfig.h.in	2013-11-27 02:06:54.000000000 +0200
+++ gnustep-base-1.24.9/Headers/GNUstepBase/GSConfig.h.in	2016-03-04 17:02:07.000000000 +0200
@@ -29,6 +29,37 @@
 #ifndef	included_GSConfig_h
 #define	included_GSConfig_h
 
+/* Check the compiler to see if we are building on/for ms-windows.
+ * Whatever the compiler uses, we want a standard setting of _WIN64
+ * to indicate 64bit AND _WIN32 to indicate ms-windows.
+ * These are defined by gcc, clang, and microsoft compilers anyway.
+ */
+#if     defined(__WIN32__) \
+	|| defined(__MS_WIN32__) \
+	|| defined(__MINGW32__)
+#  if	!defined(_WIN32)
+#    define _WIN32
+#  endif
+#endif
+#if     defined(__WIN64__) \
+	|| defined(__MS_WIN64__) \
+	|| defined(__MINGW64__)
+#  if	!defined(__WIN64__)
+#    define __WIN64__
+#  endif
+#  if	!defined(_WIN32)
+#    define _WIN32
+#  endif
+#endif
+
+/* Check to see if this is a MINGW build (all we currently support)
+ */
+#if	defined(__MINGW32__) || defined(__MINGW64__)
+#  if	!defined(__MINGW__)
+#    define __MINGW__
+#  endif
+#endif
+
 // Make sure we expose the constants that we use in ObjC++ mode
 #ifndef __STDC_CONSTANT_MACROS
 #define __STDC_CONSTANT_MACROS 1
@@ -220,10 +251,11 @@
 /*
  * Native character type for use in systemcalls etc.
  */
+
 #if	defined(__MINGW__)
-#define	GSNativeChar	uint16_t
+#  define	GSNativeChar	uint16_t
 #else
-#define	GSNativeChar	char
+#  define	GSNativeChar	char
 #endif
 
 /*
@@ -251,21 +283,6 @@
 #define GS_USE_LIBDISPATCH @HAVE_LIBDISPATCH@
 #define GS_HAVE_OBJC_ROOT_CLASS_ATTR @GS_HAVE_OBJC_ROOT_CLASS_ATTR@
 
-#if     defined(__WIN32__) || defined(_WIN32) || defined(__MS_WIN32__)
-#  if	!defined(__WIN32__)
-#    define __WIN32__
-#  endif
-#endif
-
-#if	defined(__MINGW32__)
-#  if	!defined(__MINGW__)
-#    define __MINGW__
-#  endif
-#  if	!defined(__WIN32__)
-#    define __WIN32__
-#  endif
-#endif
-
 #ifndef __has_include
 #  define __has_include(x) 0
 #endif
@@ -276,7 +293,18 @@
 #  define __has_builtin(x) 0
 #endif
 
-#if defined(__WIN32__)
+/*
+ * __has_extension has slightly different semantics from __has_feature.
+ * It evaluates to true if the feature is supported by by clang for the
+ * current compilation unit (language and -f switches), regardless of
+ * whether it is part of the language standard or just a (non-standard)
+ * extension.
+ */
+#ifndef __has_extension
+#  define __has_extension(x) __has_feature(x)
+#endif
+
+#if defined(_WIN32)
 #define BOOL WinBOOL
 #include <w32api.h>
 #ifndef _WIN32_WINNT
@@ -288,18 +316,21 @@
 #undef	WINVER
 #define WINVER Windows2000
 #endif
+
 #include <windows.h>
+#include <winsock2.h>
 #undef  BOOL
 #endif
 
-// Include the blocks runtime header if it's available (It shouldn't matter
-// that this doesn't work on compilers that don't support __has_include(),
-// because they also don't support blocks).
+/* Include the blocks runtime header if it's available (It shouldn't matter
+ * that this doesn't work on compilers that don't support __has_include(),
+ * because they also don't support blocks).
+ */
 #if __has_include(<objc/block_runtime.h>)
 #  include <objc/block_runtime.h>
 #endif
 
-#ifndef __WIN32__
+#ifndef _WIN32
 #include <sys/param.h> /* Hack to get rid of warning in GNU libc 2.0.3. */
 #endif
 
@@ -409,12 +440,23 @@
 #endif
 
 #if !__has_feature(objc_arc)
-#  if __OBJC_GC__
-#    define __strong __attribute__((objc_gc(strong)))
-#    define __weak __attribute__((objc_gc(weak)))
-#  else
-#    define __strong
-#    define __weak
+// NetBSD > 6 defines __weak in cdefs_elf.h
+#ifdef __NetBSD__
+#undef __weak
+#endif
+#  if !defined(__weak)
+#    if __OBJC_GC__
+#      define __weak __attribute__((objc_gc(weak)))
+#    else
+#      define __weak
+#    endif
+#  endif
+#  if !defined(__strong)
+#    if __OBJC_GC__
+#      define __strong __attribute__((objc_gc(strong)))
+#    else
+#      define __strong
+#    endif
 #  endif
 #endif
 
