--- gnustep-back-0.24.1.orig/Source/x11/XGServerWindow.m	2015-03-22 17:15:20.000000000 +0200
+++ gnustep-back-0.24.1/Source/x11/XGServerWindow.m	2018-02-16 23:06:59.562372042 +0200
@@ -121,11 +121,6 @@
       return nil;
     }
 
-/*
-  We should rather convert the image to a bitmap representation here via 
-  the following code, but this is currently not supported by the libart backend
-
-{
   NSSize size = [image size];
 
   [image lockFocus];
@@ -133,9 +128,9 @@
             NSMakeRect(0, 0, size.width, size.height)];
   AUTORELEASE(rep);
   [image unlockFocus];
-} 
-*/
 
+  return rep;
+/*
   rep = (NSBitmapImageRep *)[image bestRepresentationForDevice: nil];
   if (!rep || ![rep respondsToSelector: @selector(samplesPerPixel)])
     {
@@ -153,6 +148,7 @@
                                     bytesPerRow: 0
                                    bitsPerPixel: 0];
     }
+*/
 }
 
 
@@ -2936,13 +2932,38 @@
        */
       if ((window->win_attrs.window_style & NSIconWindowMask) != 0)
 	{
-#if 0
+#if 1
 	  /* This doesn't appear to do anything useful, and, at least
 	     with WindowMaker, can cause the app to flicker and spuriously
 	     lose focus if the app icon is already visible.  */
-	  if (op != NSWindowOut)
+          NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
+          
+	  if (op != NSWindowOut &&
+              window->map_state == IsUnmapped &&
+              [[defaults objectForKey: @"NXAutoLaunch"] isEqualToString:@"YES"])
 	    {
-	      XMapRaised(dpy, ROOT);
+              // window->ignore_take_focus = YES; // <<<<
+              {
+                // Window info_win = wsmap->scr->info_window;
+                XEvent ev;
+
+                ev.xclient.type = ClientMessage;
+                // WM/src/startup.c
+                ev.xclient.message_type = XInternAtom(dpy,"WM_IGNORE_FOCUS_EVENTS", False);
+                ev.xclient.format = 32;
+                
+                // Inform WM to ignore focus events
+                ev.xclient.data.l[0] = True;
+                XSendEvent(dpy, ROOT, True, EnterWindowMask, &ev);
+
+                // Action
+                XMapWindow(dpy, ROOT); // <<<<
+
+                // Inform WM to process focus events again
+                ev.xclient.data.l[0] = False;
+                XSendEvent(dpy, ROOT, True, EnterWindowMask, &ev);
+              }
+              // window->ignore_take_focus = NO; // <<<<
 	    }
 #endif
 	  return;
@@ -3397,7 +3418,6 @@
               skipTaskbar = YES;
             }
           else if (level == NSSubmenuWindowLevel
-                   || level == NSFloatingWindowLevel
                    || level == NSTornOffMenuWindowLevel)
             {
 #ifdef USE_KDE_OVERRIDE
@@ -3411,6 +3431,11 @@
 #endif
               skipTaskbar = YES;
             }
+          else if (level == NSFloatingWindowLevel)
+            {
+              data[0] = generic.wintypes.win_utility_atom;
+              len = 1;
+            }
           else if (level == NSDockWindowLevel
                    || level == NSStatusWindowLevel)
             {
@@ -4301,25 +4326,31 @@
       cursor = XCreateFontCursor(dpy, XC_crosshair);
       break;
     case GSDisappearingItemCursor:
-      cursor = XCreateFontCursor(dpy, XC_shuttle);
+      cursor = XCreateFontCursor(dpy, XC_pirate);
       break;
-    case GSPointingHandCursor:
+    case GSClosedHandCursor:
+      cursor = XCreateFontCursor(dpy, XC_fleur);
+      break;
+    case GSOpenHandCursor:
       cursor = XCreateFontCursor(dpy, XC_hand1);
       break;
+    case GSPointingHandCursor:
+      cursor = XCreateFontCursor(dpy, XC_hand2);
+      break;
     case GSResizeDownCursor:
-      cursor = XCreateFontCursor(dpy, XC_bottom_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_down_arrow);
       break;
     case GSResizeLeftCursor:
-      cursor = XCreateFontCursor(dpy, XC_left_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_left_arrow);
       break;
     case GSResizeLeftRightCursor:
       cursor = XCreateFontCursor(dpy, XC_sb_h_double_arrow);
       break;
     case GSResizeRightCursor:
-      cursor = XCreateFontCursor(dpy, XC_right_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_right_arrow);
       break;
     case GSResizeUpCursor:
-      cursor = XCreateFontCursor(dpy, XC_top_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_up_arrow);
       break;
     case GSResizeUpDownCursor:
       cursor = XCreateFontCursor(dpy, XC_sb_v_double_arrow);
@@ -4398,7 +4429,7 @@
     // FIXME: Factor this out
     // Convert RGBA unpacked to ARGB packed
     // NB Packed ARGB values are layed out as ARGB on big endian systems
-    // and as BDRA on low endian systems
+    // and as BGRA on low endian systems
     {
       NSInteger stride;
       NSInteger x, y;
